<launch>
  <arg name="world_file"  default="/home/aufarz/Downloads/maps/gen_new_world.world"/>

	<arg name="tf_prefix" default="$(optenv ROS_NAMESPACE)"/>
  <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
  <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 --> 
  <arg name="gui" default="true"/>
  <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons --> 
  <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro --> 

  <arg name="use_ground_truth_for_tf" default="true"/>
  <arg name="use_ground_truth_for_control" default="true"/>
  <arg name="use_pose_estimation" if="$(arg use_ground_truth_for_control)" default="false"/>
  <arg name="use_pose_estimation" unless="$(arg use_ground_truth_for_control)" default="true"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="world_name" value="$(arg world_file)"/>
  </include>
  
  <include file="$(find turtlebot_gazebo)/launch/includes/$(arg base).launch.xml">
    <arg name="base" value="$(arg base)"/>
    <arg name="stacks" value="$(arg stacks)"/>
    <arg name="3d_sensor" value="$(arg 3d_sensor)"/>  
  </include>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>
  

  
<!-- spawn Quadcopter 1 -->
<group ns="uav1">
   <include file="$(find voronoi_move_base)/launch/spawn_quadrotor.launch">
     <arg name="name" default="quadrotor1"/>
     <arg name="model" value="$(find voronoi_move_base)/urdf/quadrotor_with_kinect.gazebo.xacro"/>
     <arg name="tf_prefix" default="uav1"/>
     <arg name="ns" default="/uav1/uav1/"/>
     <arg name="x" default="1"/>
     <arg name="y" default="-1"/>
     <arg name="z" default="0.3"/>   
     <arg name="use_ground_truth_for_tf" value="$(arg use_ground_truth_for_tf)"/>
     <arg name="use_ground_truth_for_control" value="$(arg use_ground_truth_for_control)"/>
     <arg name="use_pose_estimation" value="$(arg use_pose_estimation)"/>
   </include>
</group>   

<group ns="uav2">
   <include file="$(find voronoi_move_base)/launch/spawn_quadrotor.launch">
     <arg name="name" default="quadrotor2"/>
     <arg name="model" value="$(find voronoi_move_base)/urdf/quadrotor_with_kinect.gazebo.xacro"/>
     <arg name="tf_prefix" default="uav2"/>
     <arg name="ns" default="/uav2/uav2/"/>
     <arg name="x" default="1"/>
     <arg name="y" default="1"/>
     <arg name="z" default="0.3"/>   
     <arg name="use_ground_truth_for_tf" value="$(arg use_ground_truth_for_tf)"/>
     <arg name="use_ground_truth_for_control" value="$(arg use_ground_truth_for_control)"/>
     <arg name="use_pose_estimation" value="$(arg use_pose_estimation)"/>
   </include>
</group>   
	
	<!-- publish transform from world to odom -->
	<node pkg="tf" type="static_transform_publisher" name="odom_world_broadcaster" args="0 0 0 0 0 0 world map 100" />
	<node pkg="tf" type="static_transform_publisher" name="odom_world_broadcaster2" args="0 0 0 0 0 0 world odom 100" />

	<node pkg="topic_tools" type="relay" name="relay_pc1" args="/uav1/camera/depth/points /cameras_joint_depth_points"></node>
	<node pkg="topic_tools" type="relay" name="relay_pc2" args="/uav2/camera/depth/points /cameras_joint_depth_points"></node>
	<node pkg="topic_tools" type="relay" name="relay_map" args="/projected_map /map"></node>

	<!-- Launch octomap -->	
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.1" />
	
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<!--param name="frame_id" type="string" value="odom_combined" /-->
		<param name="frame_id" type="string" value="world" />
		<param name="base_frame_id" type="string" value="world" />
	
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />

		<!-- let it cut ground from the map -->
		<param name="filter_ground" value="true" />
		<!--param name="pointcloud_min" value="1" />
		<param name="pointcloud_max" value="10" /-->
	
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/cameras_joint_depth_points" />
		<!--<remap from="map" to="projected_map" />-->
	</node>


  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>
</launch>
